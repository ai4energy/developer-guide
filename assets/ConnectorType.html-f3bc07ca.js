import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,a as s}from"./app-adca3b72.js";const r={},t=s(`<h2 id="连接器类型" tabindex="-1"><a class="header-anchor" href="#连接器类型" aria-hidden="true">#</a> 连接器类型</h2><p>连接器用于组件间的连接。</p><p>它有四个方面的内容需要设置，参数和变量，图形表示，端口类别，显示模板。</p><h3 id="参数和变量" tabindex="-1"><a class="header-anchor" href="#参数和变量" aria-hidden="true">#</a> 参数和变量</h3><p>对于参数声明，必须提供一个类型 - 整数、实数或外部对象（ForeignObject）。</p><p>如果选择了外部对象（ForeignObject），还可以提供一个类别。</p><p>对于整数和实数参数，还可以提供一个默认值。</p><p>外部对象主要是用于物性（流股）。</p><p>对于分布域声明，必须提供下限和上限。</p><p>对于变量声明，必须提供变量类型；这应该从项目中声明的所有变量类型的下拉列表中选择（或者跨项目引用的项目）。连接类型可以包括标量和数组变量：</p><p>要定义数组的维数，请单击scalar单元格以访问维度编辑器。</p><p>在“添加新维度”框中，可以选择在此连接类型中声明的整数参数，或者键入一个文字值（例如，7）。</p><p>可以通过添加多个维度来声明多维变量 - 多个维度可以使用“上移”和“下移”按钮进行排序。</p><h3 id="图形表示" tabindex="-1"><a class="header-anchor" href="#图形表示" aria-hidden="true">#</a> 图形表示</h3><p>流程图模型中不同单元之间的连接与连接类型相关联。这些连接在流程图模型的拓扑选项卡上以图形方式显示 - 此类连接的图形表示由其连接类型确定。</p><p>图形表示选项卡上提供的信息确定了端口和连接线的颜色，以及线的粗细。</p><h3 id="端口类别和连接规则" tabindex="-1"><a class="header-anchor" href="#端口类别和连接规则" aria-hidden="true">#</a> 端口类别和连接规则</h3><p>数字孪生强制执行一些规则，以确保在构建流程图模型时只能进行有效的连接，因此所有端口必须定义为进口、出口或双向端口。在定义模型端口时，开发人员必须指定端口属于这些类别中的哪一个，数字孪生会强制执行以下表格中显示的规则（例如，可以将出口端口连接到进口端口，但不能将出口连接到出口）。</p><p>此外，对于特定的连接类型，可以通过定义新的用户指定类别来定义额外的规则。PML利用了这种能力：在PML中，端口必须是节点（Node）或连接器（Connector），不允许进行节点到节点的连接。</p><h3 id="显示模板" tabindex="-1"><a class="header-anchor" href="#显示模板" aria-hidden="true">#</a> 显示模板</h3><p>“显示模板选项卡”允许您定义连接类型携带的哪些变量应出现在结果流表中。</p><p>在此选项卡上，您为应出现在流表中的每个变量提供一个标签，并指定这些数量在表格中的顺序。请注意，只有出现在“显示模板选项卡”上的那些数量才会出现在流表中。</p><p>参考Modelingtoolkit的/src/systems/connectors.jl，以下是代码片段：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token keyword">abstract</span> <span class="token keyword">type</span> AbstractConnectorType <span class="token keyword">end</span>
<span class="token keyword">struct</span> StreamConnector <span class="token operator">&lt;:</span> AbstractConnectorType <span class="token keyword">end</span>
<span class="token keyword">struct</span> RegularConnector <span class="token operator">&lt;:</span> AbstractConnectorType <span class="token keyword">end</span>
<span class="token keyword">struct</span> DomainConnector <span class="token operator">&lt;:</span> AbstractConnectorType <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明它能很好的处理DomainConnector情形。而对于数组的情况，这是由@variable 和@parameter 的数组设置决定的。</p><p>但是Modelingtoolkit本身的connector不能处理有外部对象的情况，我们需要考虑一下。就是外部的物性对象之类的，需要思考如何实现，才能具有普遍适用性。</p>`,26),o=[t];function p(c,d){return a(),n("div",null,o)}const h=e(r,[["render",p],["__file","ConnectorType.html.vue"]]);export{h as default};
